(define-constant ERR-DESIGN-NOT-FOUND u100)
(define-constant ERR-INVALID-RATE u101)
(define-constant ERR-INVALID-USAGE u102)
(define-constant ERR-INVALID-REVENUE u103)
(define-constant ERR-INVALID-FORMULA u104)
(define-constant ERR-CALCULATION-FAILED u105)
(define-constant ERR-NO-AUTH u106)
(define-constant ERR-INVALID-PERIOD u107)
(define-constant FORMULA-PER-OCCUPANT u1)
(define-constant FORMULA-PER-ENERGY u2)
(define-constant FORMULA-FIXED u3)
(define-map royalty-terms
  uint
  { rate: uint, base: uint, formula: uint, currency: (string-ascii 10), creator: principal }
)
(define-map usage-data
  { design-id: uint, period: uint }
  { occupants: uint, energy: uint, timestamp: uint, submitter: principal }
)
(define-map historical-royalties
  { design-id: uint, period: uint }
  uint
)
(define-data-var admin principal tx-sender)
(define-read-only (get-royalty-term (design-id uint))
  (map-get? royalty-terms design-id)
)
(define-read-only (get-usage-data (design-id uint) (period uint))
  (map-get? usage-data { design-id: design-id, period: period })
)
(define-read-only (get-historical-royalty (design-id uint) (period uint))
  (map-get? historical-royalties { design-id: design-id, period: period })
)
(define-private (validate-rate (rate uint))
  (if (and (> rate u0) (<= rate u10000)) (ok true) (err ERR-INVALID-RATE))
)
(define-private (validate-usage (occupants uint) (energy uint))
  (if (and (>= occupants u0) (>= energy u0)) (ok true) (err ERR-INVALID-USAGE))
)
(define-private (validate-revenue (revenue uint))
  (if (> revenue u0) (ok true) (err ERR-INVALID-REVENUE))
)
(define-private (validate-formula (formula uint))
  (if (or (is-eq formula FORMULA-PER-OCCUPANT)
          (is-eq formula FORMULA-PER-ENERGY)
          (is-eq formula FORMULA-FIXED))
      (ok true)
      (err ERR-INVALID-FORMULA))
)
(define-public (register-term (design-id uint) (rate uint) (base uint) (formula uint) (currency (string-ascii 10)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NO-AUTH))
    (try! (validate-rate rate))
    (try! (validate-formula formula))
    (asserts! (<= (len currency) u10) (err ERR-INVALID-RATE))
    (map-set royalty-terms design-id
      { rate: rate, base: base, formula: formula, currency: currency, creator: tx-sender }
    )
    (ok true)
  )
)
(define-public (submit-usage (design-id uint) (period uint) (occupants uint) (energy uint))
  (begin
    (try! (validate-usage occupants energy))
    (asserts! (> period u0) (err ERR-INVALID-PERIOD))
    (map-set usage-data { design-id: design-id, period: period }
      { occupants: occupants, energy: energy, timestamp: block-height, submitter: tx-sender }
    )
    (ok true)
  )
)
(define-public (calculate-royalty (design-id uint) (period uint) (revenue uint))
  (let (
        (term (unwrap! (map-get? royalty-terms design-id) (err ERR-DESIGN-NOT-FOUND)))
        (usage (unwrap! (map-get? usage-data { design-id: design-id, period: period }) (err ERR-INVALID-USAGE)))
        (rate (get rate term))
        (base (get base term))
        (formula (get formula term))
        (occupants (get occupants usage))
        (energy (get energy usage))
      )
    (try! (validate-revenue revenue))
    (let (
          (amount
            (if (is-eq formula FORMULA-PER-OCCUPANT)
                (* (/ (* rate occupants) u100) revenue)
                (if (is-eq formula FORMULA-PER-ENERGY)
                    (* (/ (* rate energy) base) revenue)
                    (if (is-eq formula FORMULA-FIXED)
                        (* rate base)
                        u0
                    )
                )
            )
          )
        )
      (asserts! (> amount u0) (err ERR-CALCULATION-FAILED))
      (map-set historical-royalties { design-id: design-id, period: period } amount)
      (ok amount)
    )
  )
)
(define-public (update-admin (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NO-AUTH))
    (var-set admin new-admin)
    (ok true)
  )
)
(define-read-only (get-admin) (var-get admin))